# NOTE: This Makefile assumes that dependencies are installed and, if a virtual
# environment is used, it is activated.

## Variables ##################################################################
# NOTE: Define any variables here if needed in the future

## Documentation ##############################################################
# NOTE: Keep all the targets in alphabetical order for better readability.

default: help

.PHONY: help
help:
	@echo "\nUsage: make [target] ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
	@echo "Available targets:\n"

	@echo "Code Quality ------------------------------------------------------------------"
	@echo "  \033[1m\033[35mformat-lint\033[0m \033[37m(fl)\033[0m: \033[36mRun linter, formatter, spellcheck.\033[0m"
	@echo "  \033[1m\033[35mprecommit-check\033[0m \033[37m(pc)\033[0m: \033[36mRun all pre-commit checks.\033[0m"
	@echo "  \033[1m\033[35msecurity\033[0m \033[37m(s)\033[0m: \033[36mRun security scans.\033[0m"
	@echo "  \033[1m\033[35mtype-check\033[0m \033[37m(tc)\033[0m: \033[36mPerform type checking.\033[0m\n"

	@echo "Documentation -----------------------------------------------------------------"
	@echo "  \033[1m\033[35mdocs\033[0m \033[37m(d)\033[0m: \033[36mGenerate project documentation.\033[0m\n"

	@echo "Environment Management --------------------------------------------------------"
	@echo "  \033[1m\033[35mclean-venv\033[0m \033[37m(cv)\033[0m: \033[36mRemove virtual environment.\033[0m"
	@echo "  \033[1m\033[35minstall\033[0m \033[37m(i)\033[0m: \033[36mInstall dependencies and {{ cookiecutter.project_name }}.\033[0m"
	@echo "  \033[1m\033[35mvenv\033[0m \033[37m(v)\033[0m: \033[36mCreate virtual environment.\033[0m\n"

	@echo "Miscellaneous -----------------------------------------------------------------"
	@echo "  \033[1m\033[35mupdate\033[0m \033[37m(u)\033[0m: \033[36mUpdate the template.\033[0m\n"

	@echo "Testing -----------------------------------------------------------------------"
	@echo "  \033[1m\033[35mtest\033[0m \033[37m(t)\033[0m: \033[36mRun all tests.\033[0m\n"

## Autogenerated Targets ######################################################
# NOTE: Keep all the targets in alphabetical order for better readability.
# NOTE: Do not modify the autogenerated targets, unless necessary, write custom
# targets in the custom section below..

.PHONY: clean-venv
clean-venv:
	@echo "\nRemoving the virtual environment ++++++++++++++++++++++++++++++++++++++++++++++\n"
	@rm -rf .venv

.PHONY: cv
cv: clean-venv

.PHONY: docs
docs:
	@echo "\nGenerating project documentation ++++++++++++++++++++++++++++++++++++++++++++++\n"
	@poetry run sphinx-apidoc -f -o docs/source/pages {{ cookiecutter.project_name_underscored }}
	@cd docs && make html
	@echo "\nSummary ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
	@echo "Documentation generated successfully."
	@echo "Open docs/build/html/index.html in your browser."
	@echo "Or serve it locally using:"
	@echo "python -m http.server -d docs/build/html/"

.PHONY: d
d: docs

.PHONY: format-lint
format-lint:
	@echo "\nRunning linter and formatter using ruff and typos +++++++++++++++++++++++++++++\n"
	@poetry run ruff format && poetry run ruff check --fix
	@typos .

.PHONY: fl
fl: format-lint

.PHONY: install
install:
	@echo "\nInstalling dependencies and with this package +++++++++++++++++++++++++++++++++\n"
	@poetry install --with=code_quality,docs,misc,test,types,vulnerability

.PHONY: i
i: install

.PHONY: precommit-check
precommit-check:
	@echo "\nRunning pre-commit checks +++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
	@poetry run pre-commit run --all-files

.PHONY: pc
pc: precommit-check

.PHONY: security
security:
	@echo "\nRunning security scans using bandit and safety ++++++++++++++++++++++++++++++++\n"
	@poetry run safety check --full-report
	@poetry run bandit -c pyproject.toml -r {{ cookiecutter.project_name_underscored }}

.PHONY: s
s: security

.PHONY: test
test:
	@echo "\nRunning tests using pytest ++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
	@poetry run pytest tests/

.PHONY: t
t: test

.PHONY: type-check
type-check:
	@echo "\nPerforming type checking with mypy ++++++++++++++++++++++++++++++++++++++++++++\n"
	@poetry run mypy {{ cookiecutter.project_name_underscored }}

.PHONY: tc
tc: type-check

.PHONY: update
update:
	@echo "\nUpdating the template +++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
	@echo "Using latest version from remote: https://github.com/elixir-cloud-aai/cookiecutter-python."
	@poetry run cruff update -y

.PHONY: u
u: update

.PHONY: venv
venv:
	@echo "\nCreating a virtual environment ++++++++++++++++++++++++++++++++++++++++++++++++\n"
	@python -m venv .venv
	@echo "\nSummary +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
	@echo "Virtual environment created successfully."
	@echo "To activate the environment for this shell session, run:"
	@echo "source .venv/bin/activate"

.PHONY: v
v: venv

## Custom Targets #############################################################
# NOTE: Keep all the targets in alphabetical order for better readability.
# NOTE: Add any custom targets here if needed in the future.
